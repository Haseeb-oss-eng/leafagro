{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to leafagro","text":"<p>A Python Package for Analyzing Agriculture data obtained from Agromonitoring API.</p> <ul> <li>Free software: MIT License</li> <li>Documentation: https://Haseeb-oss-eng.github.io/leafagro</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>Visualizing raster and vector data</li> <li>Create Interactive Maps</li> <li>Visualize Geospatial Data</li> </ul>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#v001-date","title":"v0.0.1 - Date","text":"<p>Improvement:</p> <ul> <li>TBD</li> </ul> <p>New Features:</p> <ul> <li>TBD</li> </ul>"},{"location":"common/","title":"common module","text":"<p>The common module contains common functions and classes used by the other modules.</p>"},{"location":"common/#leafagro.common.hello_world","title":"<code>hello_world()</code>","text":"<p>Prints \"Hello World!\" to the console.</p> Source code in <code>leafagro/common.py</code> <pre><code>def hello_world():\n    \"\"\"Prints \"Hello World!\" to the console.\n    \"\"\"\n    print(\"Hello World!\")\n</code></pre>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/Haseeb-oss-eng/leafagro/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with <code>bug</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with <code>enhancement</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>leafagro could always use more documentation, whether as part of the official leafagro docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/Haseeb-oss-eng/leafagro/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions are welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here's how to set up leafagro for local development.</p> <ol> <li> <p>Fork the leafagro repo on GitHub.</p> </li> <li> <p>Clone your fork locally:</p> <pre><code>$ git clone git@github.com:your_name_here/leafagro.git\n</code></pre> </li> <li> <p>Install your local copy into a virtualenv. Assuming you have     virtualenvwrapper installed, this is how you set up your fork for     local development:</p> <pre><code>$ mkvirtualenv leafagro\n$ cd leafagro/\n$ python setup.py develop\n</code></pre> </li> <li> <p>Create a branch for local development:</p> <pre><code>$ git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you can make your changes locally.</p> </li> <li> <p>When you're done making changes, check that your changes pass flake8     and the tests, including testing other Python versions with tox:</p> <pre><code>$ flake8 leafagro tests\n$ python setup.py test or pytest\n$ tox\n</code></pre> <p>To get flake8 and tox, just pip install them into your virtualenv.</p> </li> <li> <p>Commit your changes and push your branch to GitHub:</p> <pre><code>$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push origin name-of-your-bugfix-or-feature\n</code></pre> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated.     Put your new functionality into a function with a docstring, and add     the feature to the list in README.rst.</li> <li>The pull request should work for Python 3.8 and later, and     for PyPy. Check https://github.com/Haseeb-oss-eng/leafagro/pull_requests and make sure that the tests pass for all     supported Python versions.</li> </ol>"},{"location":"faq/","title":"FAQ","text":""},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install leafagro, run this command in your terminal:</p> <pre><code>pip install leafagro\n</code></pre> <p>This is the preferred method to install leafagro, as it will always install the most recent stable release.</p> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation/#from-sources","title":"From sources","text":"<p>To install leafagro from sources, run this command in your terminal:</p> <pre><code>pip install git+https://github.com/Haseeb-oss-eng/leafagro\n</code></pre>"},{"location":"leafagro/","title":"leafagro module","text":""},{"location":"leafagro/#leafagro.leafagro.Map","title":"<code> Map            (Map)         </code>","text":"<p>This is the map class that inherits from ipyleaflet.Map.</p> <p>Parameters:</p> Name Type Description Default <code>ipyleaflet</code> <code>Map</code> <p>The ipyleaflet.Map class.</p> required Source code in <code>leafagro/leafagro.py</code> <pre><code>class Map(ipyleaflet.Map):\n    \"\"\"This is the map class that inherits from ipyleaflet.Map.\n\n    Args:\n        ipyleaflet (Map): The ipyleaflet.Map class.\n    \"\"\"\n\n    def __init__(self, center=[20, 0], zoom=2, **kwargs):\n        \"\"\"initializing the Map\n\n        Args:\n            center (list, optional): set the center . Defaults to [20, 0].\n            zoom (int, optional): set the zoom. Defaults to 2.\n        \"\"\"\n        if \"scroll_wheel_zoom\" not in kwargs:\n            kwargs[\"scroll_wheel_zoom\"] = True\n\n        if \"add_layer_control\" not in kwargs:\n            layer_control_flag = True\n        else:\n            layer_control_flag = kwargs[\"add_layer_control\"]\n        kwargs.pop(\"add_layer_control\", None)\n\n        super().__init__(center=center, zoom=zoom, **kwargs)\n        if layer_control_flag:\n            self.add_layer_control()\n\n        self.add_toolbar()\n\n    def add_layer_tile(self, url, name, **kwargs):\n        layer = ipyleaflet.TileLayer(url=url, name=name, **kwargs)\n        self.add(layer)\n\n    def add_basemap(self, name):\n        \"\"\"\n        Adds a basemap to the current map.\n\n        Args:\n            name (str or object): The name of the basemap as a string, or an object representing the basemap.\n\n        Raises:\n            TypeError: If the name is neither a string nor an object representing a basemap.\n\n        Returns:\n            None\n        \"\"\"\n        if isinstance(name, str):\n            url = eval(f\"basemaps.{name}\").build_url()\n            self.add_layer_tile(url, name)\n        else:\n            self.add(name)\n\n    def add_layer_control(self, position='topright'):\n        \"\"\"Adds a layers Control in the map.\n\n        Args:\n            position (str, optional): The position the layer control. Defaults to 'topright'.\n        \"\"\"\n        has_control = False\n        for controls in self.controls:\n            if isinstance(controls, ipyleaflet.LayersControl):\n                has_control = True\n                break\n\n        if not has_control:\n            self.add_control(ipyleaflet.LayersControl(position=position))\n\n    def add_geojson(self,data,name='geojson', **kwargs):\n        \"\"\"Adds a GeoJSON layer to the map.\n\n        Args:\n            data (str | dict): The GeoJSON data as a string or a dictionary.\n            name (str, optional): The name of the layer. Defaults to \"geojson\".\n        \"\"\"\n\n        import json\n\n        if isinstance(data,str):\n            with open(data) as f:\n                data = json.load(f)\n\n        if 'style' not in kwargs:\n            kwargs['style'] = {'color':'blue', 'weight': 1, 'fillOpacity':0}\n\n        if 'hover_style' not in kwargs:\n            kwargs['hover_style'] = {'fillColor':'blue','fillOpacity': 0.5}\n\n        layer = ipyleaflet.GeoJSON(data=data,name=name, **kwargs)\n\n        self.add(layer)\n\n    def add_shp(self, data, name='Shapefile', **kwargs):\n        \"\"\"\n        Adds a shapefile to the current map.\n\n        Args:\n            data (str or dict): The path to the shapefile as a string, or a dictionary representing the shapefile.\n            name (str, optional): The name of the layer. Defaults to \"shp\".\n            **kwargs: Arbitrary keyword arguments.\n\n        Raises:\n            TypeError: If the data is neither a string nor a dictionary representing a shapefile.\n\n        Returns:\n            None\n        \"\"\"\n\n        import shapefile\n        import json\n\n        if isinstance(data, str):\n            with shapefile.Reader(data) as shp:\n                data = shp.__geo_interface__\n\n        self.add_geojson(data, name, **kwargs)\n\n    def add_imageOverlay(self, url, bounds, name=\"image\", **kwargs):\n        \"\"\"Overlays the image on the map\n\n        Args:\n            urls (str): The URL of image in String\n            bounds (list): The bounds of the image to Overlay on map\n            name (str, Optional): The name of the overlaying image, Default is \"image\".  \n        \"\"\"\n        layer = ipyleaflet.ImageOverlay(url=url, bounds=bounds, name=name, **kwargs)\n        self.add(layer)\n\n    def add_raster(self, data, name=\"raster\", zoom_to_layer=True, **kwargs):\n        \"\"\"Add the Raster in map\n\n        Args:\n            data (_type_): _description_\n            name (str, optional): _description_. Defaults to \"raster\".\n            zoom_to_layer (bool, optional): _description_. Defaults to True.\n        \"\"\"\n        try:\n            from localtileserver import TileClient, get_leaflet_tile_layer\n        except:\n            raise ImportError(\"Please install localtileserver package\")\n\n        client = TileClient(data)\n        layer = get_leaflet_tile_layer(client, name=name, **kwargs)\n        self.add(layer)\n\n        if zoom_to_layer:\n            self.center = client.center()\n            self.zoom = client.default_zoom\n\n\n\n    def normalizedDifference(self, firstBand, secondBand, layer_name, colormap, **kwargs):\n        \"\"\"\n        Add Normalized Difference data in map (firstBand - secondBand) / (firstBand + secondBand + 1e-10).\n\n        Args:\n            firstBand (str): Path to the first band file (e.g., NIR).\n            secondBand (str): Path to the second band file (e.g., Red).\n            layer_name (str): Layer name for the map.\n            colormap (str): Colormap for the visualization (e.g., 'terrain', 'viridis').\n        \"\"\"\n        from PIL import Image\n        import numpy as np\n\n        # Open both bands using PIL.Image\n        band1_img = Image.open(firstBand)\n        band2_img = Image.open(secondBand)\n\n        # Ensure both bands have the same size\n        if band1_img.size != band2_img.size:\n            raise ValueError(\"The provided bands do not have the same dimensions.\")\n\n        # Convert bands to NumPy arrays\n        band1_array = np.array(band1_img, dtype=np.float32)\n        band2_array = np.array(band2_img, dtype=np.float32)\n\n        # Calculate Normalized Difference\n        normalizedDifference = (band1_array - band2_array) / (band1_array + band2_array + 1e-10)\n\n        # Clip Normalized Difference values to the range [-1, 1] to avoid potential issues\n        normalizedDifference = np.clip(normalizedDifference, -1, 1)\n\n         # Save the NDVI array to a temporary file\n        with tempfile.NamedTemporaryFile(suffix=\".tif\", delete=False) as tmpfile:\n            ndvi_path = tmpfile.name\n        ndvi_image = Image.fromarray((normalizedDifference * 255).astype(np.uint8))  # Scale to 0-255 for saving\n        ndvi_image.save(ndvi_path)\n\n        # Add the Normalized Difference raster to the map using self.add_raster\n        self.add_raster(normalizedDifference, layer_name=layer_name, colormap=colormap)\n\n    def add_zoom_slider(self, description= \"Zoom level\", min=0, max=15, value=7, position=\"topright\", **kwargs):\n\n        \"\"\"Add Slider-level bar in map\n\n        Args:\n            position (str, optional): The position of zoom slider. Default position: topright.\n        \"\"\"\n        zoom_slider = widgets.IntSlider(description = description, min=min, max=max)\n\n        control = ipyleaflet.WidgetControl(widget = zoom_slider, position=position)\n        self.add(control)\n        widgets.jslink((zoom_slider,'value'),(self,'zoom'))\n\n    def add_widget(self, widget, position=\"topright\"):\n        \"\"\"Adds a widget to the map.\n\n        Args:\n            widget (object): The widget to be added.\n            position (str, optional): The position of the widget. Defaults to \"topright\".\n        \"\"\"\n        control = ipyleaflet.WidgetControl(widget=widget, position=position)\n        self.add(control)\n\n    def add_opacity_slider(\n        self, layer_index=-1, description=\"Opacity\", position=\"topright\"\n    ):\n        \"\"\"Adds an opacity slider to the map.\n\n        Args:\n            layer (object): The layer to which the opacity slider is added.\n            description (str, optional): The description of the opacity slider. Defaults to \"Opacity\".\n            position (str, optional): The position of the opacity slider. Defaults to \"topright\".\n        \"\"\"\n        layer = self.layers[layer_index]\n        opacity_slider = widgets.FloatSlider(\n            description=description,\n            min=0,\n            max=1,\n            value=layer.opacity,\n            style={\"description_width\": \"initial\"},\n        )\n\n        def update_opacity(change):\n            layer.opacity = change[\"new\"]\n\n        opacity_slider.observe(update_opacity, \"value\")\n\n        control = ipyleaflet.WidgetControl(widget=opacity_slider, position=position)\n        self.add(control)\n\n    def add_basemap_gui(self, basemaps=None, position=\"topright\"):\n        \"\"\"Adds a basemap GUI to the map.\n\n        Args:\n            position (str, optional): The position of the basemap GUI. Defaults to \"topright\".\n        \"\"\"\n\n        basemap_selector = widgets.Dropdown(\n            options=[\n                \"OpenStreetMap\",\n                \"OpenTopoMap\",\n                \"Esri.WorldImagery\",\n                \"Esri.NatGeoWorldMap\",\n            ],\n            description=\"Basemap\",\n        )\n\n        def update_basemap(change):\n            self.add_basemap(change[\"new\"])\n\n        basemap_selector.observe(update_basemap, \"value\")\n\n        control = ipyleaflet.WidgetControl(widget=basemap_selector, position=position)\n        self.add(control)\n\n    def add_toolbar(self, position=\"topright\"):\n        \"\"\"Adds a toolbar to the map.\n\n        Args:\n            position (str, optional): The position of the toolbar. Defaults to \"topright\".\n        \"\"\"\n\n        padding = \"0px 0px 0px 5px\"  # upper, right, bottom, left\n\n        toolbar_button = widgets.ToggleButton(\n            value=False,\n            tooltip=\"Toolbar\",\n            icon=\"wrench\",\n            layout=widgets.Layout(width=\"28px\", height=\"28px\", padding=padding),\n        )\n\n        close_button = widgets.ToggleButton(\n            value=False,\n            tooltip=\"Close the tool\",\n            icon=\"times\",\n            button_style=\"primary\",\n            layout=widgets.Layout(height=\"28px\", width=\"28px\", padding=padding),\n        )\n\n        toolbar = widgets.VBox([toolbar_button])\n\n        def close_click(change):\n            if change[\"new\"]:\n                toolbar_button.close()\n                close_button.close()\n                toolbar.close()\n\n        close_button.observe(close_click, \"value\")\n\n        rows = 1\n        cols = 1\n        grid = widgets.GridspecLayout(\n            rows, cols, grid_gap=\"0px\", layout=widgets.Layout(width=\"65px\")\n        )\n\n        # icons = [\"folder-open\", \"map\", \"info\", \"question\"]\n        icons = [\"basemap\"]\n\n        for i in range(rows):\n            for j in range(cols):\n                grid[i, j] = widgets.Button(\n                    description=\"\",\n                    button_style=\"primary\",\n                    icon=icons[i * rows + j],\n                    layout=widgets.Layout(width=\"28px\", padding=\"0px\"),\n                )\n\n        def toolbar_click(change):\n            if change[\"new\"]:\n                toolbar.children = [widgets.HBox([close_button, toolbar_button]), grid]\n            else:\n                toolbar.children = [toolbar_button]\n\n        toolbar_button.observe(toolbar_click, \"value\")\n        toolbar_ctrl = WidgetControl(widget=toolbar, position=\"topright\")\n        self.add(toolbar_ctrl)\n\n        output = widgets.Output()\n        output_control = WidgetControl(widget=output, position=\"bottomright\")\n        self.add(output_control)\n\n        def toolbar_callback(change):\n            if change.icon == \"basemap\":\n                with output:\n                    output.clear_output()\n                    self.add_basemap_gui()\n            elif change.icon == \"map\":\n                with output:\n                    output.clear_output()\n                    print(f\"You can add a layer\")\n            else:\n                with output:\n                    output.clear_output()\n                    print(f\"Icon: {change.icon}\")\n\n        for tool in grid.children:\n            tool.on_click(toolbar_callback)\n\n    def add_split_map(self, left_layer, right_layer, **kwargs):\n        \"\"\"Adds a split map to the current map.\n\n        Args:\n            left_layer (object): The left layer of the split map.\n            right_layer (object): The right layer of the split map.\n        \"\"\"\n\n        control = SplitMapControl(\n            left_layer=left_layer,\n            right_layer=right_layer,\n        )\n        self.add(control)\n\n    def show_agromonitoring_tile(self,API_key, polygonId, startDate, endDate, data,table=False):\n\n        \"\"\"Add the Agromonitoring tile layer in map\n\n        Args:\n            API_key (str): Provide the Agromonitoring API Key.\n            polygonId (str): Provide the polygon ID (study area) from Agromonitoring.\n            startDate (str): Date format \"YYYY-MM-DD\" (ex. \"2018-01-01\").\n            endDate (str): Date format \"YYYY-MM-DD\" (ex. \"2018-02-01\").\n            data (str): Data to retrieve from Agromonitoring. Available Data ['truecolor', 'falsecolor', 'ndvi', 'evi', 'evi2', 'ndwi', 'nri', 'dswi'].\n            table (bool): Display the tables of Data available with data (default: False).\n        \"\"\"\n        from  leafagro.agromonitoring import Agromonitoring as ag\n\n        # Retrieve the tile data from agromonitoring.py\n        df = ag.get_agromonitoring_tile(API_key, polygonId, startDate, endDate, data)\n\n        if df is None:\n            print(\"No data to display.\")\n            return\n\n        # Display the table if requested\n        if table:\n            print(df)\n        else:\n        # Add all tiles to the map\n            for index, row in df.iterrows():\n                tile_url = row['URL']\n                date = row['Date']\n                self.add_layer_tile(tile_url, name=f\"{date} {data}\")\n\n    def show_agromonitoring_stats(self,API_Key, polygonId, startDate, endDate, data, display=False):\n        \"\"\"Display the Summary Statistics of Table\n\n        Args:\n            API_key (str): Provide the Agromonitoring API Key.\n            polygonId (str): Provide the polygon ID (study area) from Agromonitoring.\n            startDate (str): Date format \"YYYY-MM-DD\" (ex. \"2018-01-01\").\n            endDate (str): Date format \"YYYY-MM-DD\" (ex. \"2018-02-01\").\n            data (str): Data to retrieve from Agromonitoring. Available Data ['truecolor', 'falsecolor', 'ndvi', 'evi', 'evi2', 'ndwi', 'nri', 'dswi'].\n            display (bool): True to display the stats on map. (default: False)\n        \"\"\"\n        from leafagro.agromonitoring import Agromonitoring as ag\n\n        stats_df = ag.get_agromonitoring_stat(API_Key,polygonId, startDate, endDate, data)\n\n        if display:\n            for index, stat in stats_df.iterrows():\n                self.display_stats(stat['URL'], stat['Date'])\n        else:\n            if stats_df is not None:\n                    print(stats_df)\n            else:\n                    print(f\"The given data or Polygon ID is Wrong is not available in Agromonitoring\") \n\n\n\n\n    def display_stats(self, statsUrl, date):\n        \"\"\"Display Summary Statistics of Polygon\n\n        Args:\n            statsUrl (str): Input Stats Url from agromonitoring stats.\n            date (str): Date of the stats.\n        \"\"\"\n        import requests\n        import time\n        import pandas as pd\n        from urllib.parse import urlparse, parse_qs\n\n        try:\n        # Fetch statistics data from the given URL\n            data = requests.get(statsUrl)\n            data_dict = data.json()\n            stats_df = pd.DataFrame([data_dict], index=[date], columns=data_dict.keys())\n\n            # Parse the stats URL to extract polygon ID and API key\n            parsed_url = urlparse(statsUrl)\n            path_segments = parsed_url.path.split('/')\n            polygon_id = path_segments[-1]  # Extract polygon ID\n            query_params = parse_qs(parsed_url.query)\n            api_key = query_params.get('appid', [None])[0]  # Extract API key\n\n            # Define polygons URL using the API key\n            polygons_url = f\"http://api.agromonitoring.com/agro/1.0/polygons?appid={api_key}\"\n            response = requests.get(polygons_url)\n\n            if response.status_code == 200:\n                metadata = response.json()\n                coordinates = None\n                if isinstance(metadata, list):\n                    for polygons in metadata:\n                        Id = polygons.get('id')\n                        if Id == polygon_id:\n                            coordinates = polygons['geo_json']  # Extract coordinates\n                            break\n\n                # Add the polygon's geojson to the map\n                if coordinates:\n                    self.add_geojson(coordinates)\n                else:\n                    print(f\"No matching polygon found for ID: {polygon_id}\")\n\n                # If statistics data is available, display it\n                if stats_df is not None:\n                    # Convert stats_df to HTML with some inline styling\n                    html_content = stats_df.to_html(classes='styled-table')\n                    html_styled = f\"\"\"\n                    &lt;style&gt;\n                    .styled-table {{\n                        font-size: 18px;\n                        color: green;\n                    }}\n                    &lt;/style&gt;\n                    {html_content}\n                    \"\"\"\n\n                    # Create an output widget and add it to the map\n                    widget = Output(layout={'border': '1px solid white'})\n                    output_widget = WidgetControl(widget=widget, position='bottomright')\n                    self.add(output_widget)\n                    with widget:\n                        widget.clear_output()\n                        display(HTML(html_styled))\n                else:\n                    print(\"No statistics data available.\")\n            else:\n                print(f\"Error fetching polygons: {response.status_code}\")\n\n        except requests.exceptions.RequestException as e:\n            print(f\"An error occurred while making the API request: {e}\")\n</code></pre>"},{"location":"leafagro/#leafagro.leafagro.Map.__init__","title":"<code>__init__(self, center=[20, 0], zoom=2, **kwargs)</code>  <code>special</code>","text":"<p>initializing the Map</p> <p>Parameters:</p> Name Type Description Default <code>center</code> <code>list</code> <p>set the center . Defaults to [20, 0].</p> <code>[20, 0]</code> <code>zoom</code> <code>int</code> <p>set the zoom. Defaults to 2.</p> <code>2</code> Source code in <code>leafagro/leafagro.py</code> <pre><code>def __init__(self, center=[20, 0], zoom=2, **kwargs):\n    \"\"\"initializing the Map\n\n    Args:\n        center (list, optional): set the center . Defaults to [20, 0].\n        zoom (int, optional): set the zoom. Defaults to 2.\n    \"\"\"\n    if \"scroll_wheel_zoom\" not in kwargs:\n        kwargs[\"scroll_wheel_zoom\"] = True\n\n    if \"add_layer_control\" not in kwargs:\n        layer_control_flag = True\n    else:\n        layer_control_flag = kwargs[\"add_layer_control\"]\n    kwargs.pop(\"add_layer_control\", None)\n\n    super().__init__(center=center, zoom=zoom, **kwargs)\n    if layer_control_flag:\n        self.add_layer_control()\n\n    self.add_toolbar()\n</code></pre>"},{"location":"leafagro/#leafagro.leafagro.Map.add_basemap","title":"<code>add_basemap(self, name)</code>","text":"<p>Adds a basemap to the current map.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str or object</code> <p>The name of the basemap as a string, or an object representing the basemap.</p> required <p>Exceptions:</p> Type Description <code>TypeError</code> <p>If the name is neither a string nor an object representing a basemap.</p> <p>Returns:</p> Type Description <p>None</p> Source code in <code>leafagro/leafagro.py</code> <pre><code>def add_basemap(self, name):\n    \"\"\"\n    Adds a basemap to the current map.\n\n    Args:\n        name (str or object): The name of the basemap as a string, or an object representing the basemap.\n\n    Raises:\n        TypeError: If the name is neither a string nor an object representing a basemap.\n\n    Returns:\n        None\n    \"\"\"\n    if isinstance(name, str):\n        url = eval(f\"basemaps.{name}\").build_url()\n        self.add_layer_tile(url, name)\n    else:\n        self.add(name)\n</code></pre>"},{"location":"leafagro/#leafagro.leafagro.Map.add_basemap_gui","title":"<code>add_basemap_gui(self, basemaps=None, position='topright')</code>","text":"<p>Adds a basemap GUI to the map.</p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code>str</code> <p>The position of the basemap GUI. Defaults to \"topright\".</p> <code>'topright'</code> Source code in <code>leafagro/leafagro.py</code> <pre><code>def add_basemap_gui(self, basemaps=None, position=\"topright\"):\n    \"\"\"Adds a basemap GUI to the map.\n\n    Args:\n        position (str, optional): The position of the basemap GUI. Defaults to \"topright\".\n    \"\"\"\n\n    basemap_selector = widgets.Dropdown(\n        options=[\n            \"OpenStreetMap\",\n            \"OpenTopoMap\",\n            \"Esri.WorldImagery\",\n            \"Esri.NatGeoWorldMap\",\n        ],\n        description=\"Basemap\",\n    )\n\n    def update_basemap(change):\n        self.add_basemap(change[\"new\"])\n\n    basemap_selector.observe(update_basemap, \"value\")\n\n    control = ipyleaflet.WidgetControl(widget=basemap_selector, position=position)\n    self.add(control)\n</code></pre>"},{"location":"leafagro/#leafagro.leafagro.Map.add_geojson","title":"<code>add_geojson(self, data, name='geojson', **kwargs)</code>","text":"<p>Adds a GeoJSON layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str | dict</code> <p>The GeoJSON data as a string or a dictionary.</p> required <code>name</code> <code>str</code> <p>The name of the layer. Defaults to \"geojson\".</p> <code>'geojson'</code> Source code in <code>leafagro/leafagro.py</code> <pre><code>def add_geojson(self,data,name='geojson', **kwargs):\n    \"\"\"Adds a GeoJSON layer to the map.\n\n    Args:\n        data (str | dict): The GeoJSON data as a string or a dictionary.\n        name (str, optional): The name of the layer. Defaults to \"geojson\".\n    \"\"\"\n\n    import json\n\n    if isinstance(data,str):\n        with open(data) as f:\n            data = json.load(f)\n\n    if 'style' not in kwargs:\n        kwargs['style'] = {'color':'blue', 'weight': 1, 'fillOpacity':0}\n\n    if 'hover_style' not in kwargs:\n        kwargs['hover_style'] = {'fillColor':'blue','fillOpacity': 0.5}\n\n    layer = ipyleaflet.GeoJSON(data=data,name=name, **kwargs)\n\n    self.add(layer)\n</code></pre>"},{"location":"leafagro/#leafagro.leafagro.Map.add_imageOverlay","title":"<code>add_imageOverlay(self, url, bounds, name='image', **kwargs)</code>","text":"<p>Overlays the image on the map</p> <p>Parameters:</p> Name Type Description Default <code>urls</code> <code>str</code> <p>The URL of image in String</p> required <code>bounds</code> <code>list</code> <p>The bounds of the image to Overlay on map</p> required <code>name</code> <code>str, Optional</code> <p>The name of the overlaying image, Default is \"image\".  </p> <code>'image'</code> Source code in <code>leafagro/leafagro.py</code> <pre><code>def add_imageOverlay(self, url, bounds, name=\"image\", **kwargs):\n    \"\"\"Overlays the image on the map\n\n    Args:\n        urls (str): The URL of image in String\n        bounds (list): The bounds of the image to Overlay on map\n        name (str, Optional): The name of the overlaying image, Default is \"image\".  \n    \"\"\"\n    layer = ipyleaflet.ImageOverlay(url=url, bounds=bounds, name=name, **kwargs)\n    self.add(layer)\n</code></pre>"},{"location":"leafagro/#leafagro.leafagro.Map.add_layer_control","title":"<code>add_layer_control(self, position='topright')</code>","text":"<p>Adds a layers Control in the map.</p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code>str</code> <p>The position the layer control. Defaults to 'topright'.</p> <code>'topright'</code> Source code in <code>leafagro/leafagro.py</code> <pre><code>def add_layer_control(self, position='topright'):\n    \"\"\"Adds a layers Control in the map.\n\n    Args:\n        position (str, optional): The position the layer control. Defaults to 'topright'.\n    \"\"\"\n    has_control = False\n    for controls in self.controls:\n        if isinstance(controls, ipyleaflet.LayersControl):\n            has_control = True\n            break\n\n    if not has_control:\n        self.add_control(ipyleaflet.LayersControl(position=position))\n</code></pre>"},{"location":"leafagro/#leafagro.leafagro.Map.add_opacity_slider","title":"<code>add_opacity_slider(self, layer_index=-1, description='Opacity', position='topright')</code>","text":"<p>Adds an opacity slider to the map.</p> <p>Parameters:</p> Name Type Description Default <code>layer</code> <code>object</code> <p>The layer to which the opacity slider is added.</p> required <code>description</code> <code>str</code> <p>The description of the opacity slider. Defaults to \"Opacity\".</p> <code>'Opacity'</code> <code>position</code> <code>str</code> <p>The position of the opacity slider. Defaults to \"topright\".</p> <code>'topright'</code> Source code in <code>leafagro/leafagro.py</code> <pre><code>def add_opacity_slider(\n    self, layer_index=-1, description=\"Opacity\", position=\"topright\"\n):\n    \"\"\"Adds an opacity slider to the map.\n\n    Args:\n        layer (object): The layer to which the opacity slider is added.\n        description (str, optional): The description of the opacity slider. Defaults to \"Opacity\".\n        position (str, optional): The position of the opacity slider. Defaults to \"topright\".\n    \"\"\"\n    layer = self.layers[layer_index]\n    opacity_slider = widgets.FloatSlider(\n        description=description,\n        min=0,\n        max=1,\n        value=layer.opacity,\n        style={\"description_width\": \"initial\"},\n    )\n\n    def update_opacity(change):\n        layer.opacity = change[\"new\"]\n\n    opacity_slider.observe(update_opacity, \"value\")\n\n    control = ipyleaflet.WidgetControl(widget=opacity_slider, position=position)\n    self.add(control)\n</code></pre>"},{"location":"leafagro/#leafagro.leafagro.Map.add_raster","title":"<code>add_raster(self, data, name='raster', zoom_to_layer=True, **kwargs)</code>","text":"<p>Add the Raster in map</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>_type_</code> <p>description</p> required <code>name</code> <code>str</code> <p>description. Defaults to \"raster\".</p> <code>'raster'</code> <code>zoom_to_layer</code> <code>bool</code> <p>description. Defaults to True.</p> <code>True</code> Source code in <code>leafagro/leafagro.py</code> <pre><code>def add_raster(self, data, name=\"raster\", zoom_to_layer=True, **kwargs):\n    \"\"\"Add the Raster in map\n\n    Args:\n        data (_type_): _description_\n        name (str, optional): _description_. Defaults to \"raster\".\n        zoom_to_layer (bool, optional): _description_. Defaults to True.\n    \"\"\"\n    try:\n        from localtileserver import TileClient, get_leaflet_tile_layer\n    except:\n        raise ImportError(\"Please install localtileserver package\")\n\n    client = TileClient(data)\n    layer = get_leaflet_tile_layer(client, name=name, **kwargs)\n    self.add(layer)\n\n    if zoom_to_layer:\n        self.center = client.center()\n        self.zoom = client.default_zoom\n</code></pre>"},{"location":"leafagro/#leafagro.leafagro.Map.add_shp","title":"<code>add_shp(self, data, name='Shapefile', **kwargs)</code>","text":"<p>Adds a shapefile to the current map.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str or dict</code> <p>The path to the shapefile as a string, or a dictionary representing the shapefile.</p> required <code>name</code> <code>str</code> <p>The name of the layer. Defaults to \"shp\".</p> <code>'Shapefile'</code> <code>**kwargs</code> <p>Arbitrary keyword arguments.</p> <code>{}</code> <p>Exceptions:</p> Type Description <code>TypeError</code> <p>If the data is neither a string nor a dictionary representing a shapefile.</p> <p>Returns:</p> Type Description <p>None</p> Source code in <code>leafagro/leafagro.py</code> <pre><code>def add_shp(self, data, name='Shapefile', **kwargs):\n    \"\"\"\n    Adds a shapefile to the current map.\n\n    Args:\n        data (str or dict): The path to the shapefile as a string, or a dictionary representing the shapefile.\n        name (str, optional): The name of the layer. Defaults to \"shp\".\n        **kwargs: Arbitrary keyword arguments.\n\n    Raises:\n        TypeError: If the data is neither a string nor a dictionary representing a shapefile.\n\n    Returns:\n        None\n    \"\"\"\n\n    import shapefile\n    import json\n\n    if isinstance(data, str):\n        with shapefile.Reader(data) as shp:\n            data = shp.__geo_interface__\n\n    self.add_geojson(data, name, **kwargs)\n</code></pre>"},{"location":"leafagro/#leafagro.leafagro.Map.add_split_map","title":"<code>add_split_map(self, left_layer, right_layer, **kwargs)</code>","text":"<p>Adds a split map to the current map.</p> <p>Parameters:</p> Name Type Description Default <code>left_layer</code> <code>object</code> <p>The left layer of the split map.</p> required <code>right_layer</code> <code>object</code> <p>The right layer of the split map.</p> required Source code in <code>leafagro/leafagro.py</code> <pre><code>def add_split_map(self, left_layer, right_layer, **kwargs):\n    \"\"\"Adds a split map to the current map.\n\n    Args:\n        left_layer (object): The left layer of the split map.\n        right_layer (object): The right layer of the split map.\n    \"\"\"\n\n    control = SplitMapControl(\n        left_layer=left_layer,\n        right_layer=right_layer,\n    )\n    self.add(control)\n</code></pre>"},{"location":"leafagro/#leafagro.leafagro.Map.add_toolbar","title":"<code>add_toolbar(self, position='topright')</code>","text":"<p>Adds a toolbar to the map.</p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code>str</code> <p>The position of the toolbar. Defaults to \"topright\".</p> <code>'topright'</code> Source code in <code>leafagro/leafagro.py</code> <pre><code>def add_toolbar(self, position=\"topright\"):\n    \"\"\"Adds a toolbar to the map.\n\n    Args:\n        position (str, optional): The position of the toolbar. Defaults to \"topright\".\n    \"\"\"\n\n    padding = \"0px 0px 0px 5px\"  # upper, right, bottom, left\n\n    toolbar_button = widgets.ToggleButton(\n        value=False,\n        tooltip=\"Toolbar\",\n        icon=\"wrench\",\n        layout=widgets.Layout(width=\"28px\", height=\"28px\", padding=padding),\n    )\n\n    close_button = widgets.ToggleButton(\n        value=False,\n        tooltip=\"Close the tool\",\n        icon=\"times\",\n        button_style=\"primary\",\n        layout=widgets.Layout(height=\"28px\", width=\"28px\", padding=padding),\n    )\n\n    toolbar = widgets.VBox([toolbar_button])\n\n    def close_click(change):\n        if change[\"new\"]:\n            toolbar_button.close()\n            close_button.close()\n            toolbar.close()\n\n    close_button.observe(close_click, \"value\")\n\n    rows = 1\n    cols = 1\n    grid = widgets.GridspecLayout(\n        rows, cols, grid_gap=\"0px\", layout=widgets.Layout(width=\"65px\")\n    )\n\n    # icons = [\"folder-open\", \"map\", \"info\", \"question\"]\n    icons = [\"basemap\"]\n\n    for i in range(rows):\n        for j in range(cols):\n            grid[i, j] = widgets.Button(\n                description=\"\",\n                button_style=\"primary\",\n                icon=icons[i * rows + j],\n                layout=widgets.Layout(width=\"28px\", padding=\"0px\"),\n            )\n\n    def toolbar_click(change):\n        if change[\"new\"]:\n            toolbar.children = [widgets.HBox([close_button, toolbar_button]), grid]\n        else:\n            toolbar.children = [toolbar_button]\n\n    toolbar_button.observe(toolbar_click, \"value\")\n    toolbar_ctrl = WidgetControl(widget=toolbar, position=\"topright\")\n    self.add(toolbar_ctrl)\n\n    output = widgets.Output()\n    output_control = WidgetControl(widget=output, position=\"bottomright\")\n    self.add(output_control)\n\n    def toolbar_callback(change):\n        if change.icon == \"basemap\":\n            with output:\n                output.clear_output()\n                self.add_basemap_gui()\n        elif change.icon == \"map\":\n            with output:\n                output.clear_output()\n                print(f\"You can add a layer\")\n        else:\n            with output:\n                output.clear_output()\n                print(f\"Icon: {change.icon}\")\n\n    for tool in grid.children:\n        tool.on_click(toolbar_callback)\n</code></pre>"},{"location":"leafagro/#leafagro.leafagro.Map.add_widget","title":"<code>add_widget(self, widget, position='topright')</code>","text":"<p>Adds a widget to the map.</p> <p>Parameters:</p> Name Type Description Default <code>widget</code> <code>object</code> <p>The widget to be added.</p> required <code>position</code> <code>str</code> <p>The position of the widget. Defaults to \"topright\".</p> <code>'topright'</code> Source code in <code>leafagro/leafagro.py</code> <pre><code>def add_widget(self, widget, position=\"topright\"):\n    \"\"\"Adds a widget to the map.\n\n    Args:\n        widget (object): The widget to be added.\n        position (str, optional): The position of the widget. Defaults to \"topright\".\n    \"\"\"\n    control = ipyleaflet.WidgetControl(widget=widget, position=position)\n    self.add(control)\n</code></pre>"},{"location":"leafagro/#leafagro.leafagro.Map.add_zoom_slider","title":"<code>add_zoom_slider(self, description='Zoom level', min=0, max=15, value=7, position='topright', **kwargs)</code>","text":"<p>Add Slider-level bar in map</p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code>str</code> <p>The position of zoom slider. Default position: topright.</p> <code>'topright'</code> Source code in <code>leafagro/leafagro.py</code> <pre><code>def add_zoom_slider(self, description= \"Zoom level\", min=0, max=15, value=7, position=\"topright\", **kwargs):\n\n    \"\"\"Add Slider-level bar in map\n\n    Args:\n        position (str, optional): The position of zoom slider. Default position: topright.\n    \"\"\"\n    zoom_slider = widgets.IntSlider(description = description, min=min, max=max)\n\n    control = ipyleaflet.WidgetControl(widget = zoom_slider, position=position)\n    self.add(control)\n    widgets.jslink((zoom_slider,'value'),(self,'zoom'))\n</code></pre>"},{"location":"leafagro/#leafagro.leafagro.Map.display_stats","title":"<code>display_stats(self, statsUrl, date)</code>","text":"<p>Display Summary Statistics of Polygon</p> <p>Parameters:</p> Name Type Description Default <code>statsUrl</code> <code>str</code> <p>Input Stats Url from agromonitoring stats.</p> required <code>date</code> <code>str</code> <p>Date of the stats.</p> required Source code in <code>leafagro/leafagro.py</code> <pre><code>def display_stats(self, statsUrl, date):\n    \"\"\"Display Summary Statistics of Polygon\n\n    Args:\n        statsUrl (str): Input Stats Url from agromonitoring stats.\n        date (str): Date of the stats.\n    \"\"\"\n    import requests\n    import time\n    import pandas as pd\n    from urllib.parse import urlparse, parse_qs\n\n    try:\n    # Fetch statistics data from the given URL\n        data = requests.get(statsUrl)\n        data_dict = data.json()\n        stats_df = pd.DataFrame([data_dict], index=[date], columns=data_dict.keys())\n\n        # Parse the stats URL to extract polygon ID and API key\n        parsed_url = urlparse(statsUrl)\n        path_segments = parsed_url.path.split('/')\n        polygon_id = path_segments[-1]  # Extract polygon ID\n        query_params = parse_qs(parsed_url.query)\n        api_key = query_params.get('appid', [None])[0]  # Extract API key\n\n        # Define polygons URL using the API key\n        polygons_url = f\"http://api.agromonitoring.com/agro/1.0/polygons?appid={api_key}\"\n        response = requests.get(polygons_url)\n\n        if response.status_code == 200:\n            metadata = response.json()\n            coordinates = None\n            if isinstance(metadata, list):\n                for polygons in metadata:\n                    Id = polygons.get('id')\n                    if Id == polygon_id:\n                        coordinates = polygons['geo_json']  # Extract coordinates\n                        break\n\n            # Add the polygon's geojson to the map\n            if coordinates:\n                self.add_geojson(coordinates)\n            else:\n                print(f\"No matching polygon found for ID: {polygon_id}\")\n\n            # If statistics data is available, display it\n            if stats_df is not None:\n                # Convert stats_df to HTML with some inline styling\n                html_content = stats_df.to_html(classes='styled-table')\n                html_styled = f\"\"\"\n                &lt;style&gt;\n                .styled-table {{\n                    font-size: 18px;\n                    color: green;\n                }}\n                &lt;/style&gt;\n                {html_content}\n                \"\"\"\n\n                # Create an output widget and add it to the map\n                widget = Output(layout={'border': '1px solid white'})\n                output_widget = WidgetControl(widget=widget, position='bottomright')\n                self.add(output_widget)\n                with widget:\n                    widget.clear_output()\n                    display(HTML(html_styled))\n            else:\n                print(\"No statistics data available.\")\n        else:\n            print(f\"Error fetching polygons: {response.status_code}\")\n\n    except requests.exceptions.RequestException as e:\n        print(f\"An error occurred while making the API request: {e}\")\n</code></pre>"},{"location":"leafagro/#leafagro.leafagro.Map.normalizedDifference","title":"<code>normalizedDifference(self, firstBand, secondBand, layer_name, colormap, **kwargs)</code>","text":"<p>Add Normalized Difference data in map (firstBand - secondBand) / (firstBand + secondBand + 1e-10).</p> <p>Parameters:</p> Name Type Description Default <code>firstBand</code> <code>str</code> <p>Path to the first band file (e.g., NIR).</p> required <code>secondBand</code> <code>str</code> <p>Path to the second band file (e.g., Red).</p> required <code>layer_name</code> <code>str</code> <p>Layer name for the map.</p> required <code>colormap</code> <code>str</code> <p>Colormap for the visualization (e.g., 'terrain', 'viridis').</p> required Source code in <code>leafagro/leafagro.py</code> <pre><code>def normalizedDifference(self, firstBand, secondBand, layer_name, colormap, **kwargs):\n    \"\"\"\n    Add Normalized Difference data in map (firstBand - secondBand) / (firstBand + secondBand + 1e-10).\n\n    Args:\n        firstBand (str): Path to the first band file (e.g., NIR).\n        secondBand (str): Path to the second band file (e.g., Red).\n        layer_name (str): Layer name for the map.\n        colormap (str): Colormap for the visualization (e.g., 'terrain', 'viridis').\n    \"\"\"\n    from PIL import Image\n    import numpy as np\n\n    # Open both bands using PIL.Image\n    band1_img = Image.open(firstBand)\n    band2_img = Image.open(secondBand)\n\n    # Ensure both bands have the same size\n    if band1_img.size != band2_img.size:\n        raise ValueError(\"The provided bands do not have the same dimensions.\")\n\n    # Convert bands to NumPy arrays\n    band1_array = np.array(band1_img, dtype=np.float32)\n    band2_array = np.array(band2_img, dtype=np.float32)\n\n    # Calculate Normalized Difference\n    normalizedDifference = (band1_array - band2_array) / (band1_array + band2_array + 1e-10)\n\n    # Clip Normalized Difference values to the range [-1, 1] to avoid potential issues\n    normalizedDifference = np.clip(normalizedDifference, -1, 1)\n\n     # Save the NDVI array to a temporary file\n    with tempfile.NamedTemporaryFile(suffix=\".tif\", delete=False) as tmpfile:\n        ndvi_path = tmpfile.name\n    ndvi_image = Image.fromarray((normalizedDifference * 255).astype(np.uint8))  # Scale to 0-255 for saving\n    ndvi_image.save(ndvi_path)\n\n    # Add the Normalized Difference raster to the map using self.add_raster\n    self.add_raster(normalizedDifference, layer_name=layer_name, colormap=colormap)\n</code></pre>"},{"location":"leafagro/#leafagro.leafagro.Map.show_agromonitoring_stats","title":"<code>show_agromonitoring_stats(self, API_Key, polygonId, startDate, endDate, data, display=False)</code>","text":"<p>Display the Summary Statistics of Table</p> <p>Parameters:</p> Name Type Description Default <code>API_key</code> <code>str</code> <p>Provide the Agromonitoring API Key.</p> required <code>polygonId</code> <code>str</code> <p>Provide the polygon ID (study area) from Agromonitoring.</p> required <code>startDate</code> <code>str</code> <p>Date format \"YYYY-MM-DD\" (ex. \"2018-01-01\").</p> required <code>endDate</code> <code>str</code> <p>Date format \"YYYY-MM-DD\" (ex. \"2018-02-01\").</p> required <code>data</code> <code>str</code> <p>Data to retrieve from Agromonitoring. Available Data ['truecolor', 'falsecolor', 'ndvi', 'evi', 'evi2', 'ndwi', 'nri', 'dswi'].</p> required <code>display</code> <code>bool</code> <p>True to display the stats on map. (default: False)</p> <code>False</code> Source code in <code>leafagro/leafagro.py</code> <pre><code>def show_agromonitoring_stats(self,API_Key, polygonId, startDate, endDate, data, display=False):\n    \"\"\"Display the Summary Statistics of Table\n\n    Args:\n        API_key (str): Provide the Agromonitoring API Key.\n        polygonId (str): Provide the polygon ID (study area) from Agromonitoring.\n        startDate (str): Date format \"YYYY-MM-DD\" (ex. \"2018-01-01\").\n        endDate (str): Date format \"YYYY-MM-DD\" (ex. \"2018-02-01\").\n        data (str): Data to retrieve from Agromonitoring. Available Data ['truecolor', 'falsecolor', 'ndvi', 'evi', 'evi2', 'ndwi', 'nri', 'dswi'].\n        display (bool): True to display the stats on map. (default: False)\n    \"\"\"\n    from leafagro.agromonitoring import Agromonitoring as ag\n\n    stats_df = ag.get_agromonitoring_stat(API_Key,polygonId, startDate, endDate, data)\n\n    if display:\n        for index, stat in stats_df.iterrows():\n            self.display_stats(stat['URL'], stat['Date'])\n    else:\n        if stats_df is not None:\n                print(stats_df)\n        else:\n                print(f\"The given data or Polygon ID is Wrong is not available in Agromonitoring\") \n</code></pre>"},{"location":"leafagro/#leafagro.leafagro.Map.show_agromonitoring_tile","title":"<code>show_agromonitoring_tile(self, API_key, polygonId, startDate, endDate, data, table=False)</code>","text":"<p>Add the Agromonitoring tile layer in map</p> <p>Parameters:</p> Name Type Description Default <code>API_key</code> <code>str</code> <p>Provide the Agromonitoring API Key.</p> required <code>polygonId</code> <code>str</code> <p>Provide the polygon ID (study area) from Agromonitoring.</p> required <code>startDate</code> <code>str</code> <p>Date format \"YYYY-MM-DD\" (ex. \"2018-01-01\").</p> required <code>endDate</code> <code>str</code> <p>Date format \"YYYY-MM-DD\" (ex. \"2018-02-01\").</p> required <code>data</code> <code>str</code> <p>Data to retrieve from Agromonitoring. Available Data ['truecolor', 'falsecolor', 'ndvi', 'evi', 'evi2', 'ndwi', 'nri', 'dswi'].</p> required <code>table</code> <code>bool</code> <p>Display the tables of Data available with data (default: False).</p> <code>False</code> Source code in <code>leafagro/leafagro.py</code> <pre><code>def show_agromonitoring_tile(self,API_key, polygonId, startDate, endDate, data,table=False):\n\n    \"\"\"Add the Agromonitoring tile layer in map\n\n    Args:\n        API_key (str): Provide the Agromonitoring API Key.\n        polygonId (str): Provide the polygon ID (study area) from Agromonitoring.\n        startDate (str): Date format \"YYYY-MM-DD\" (ex. \"2018-01-01\").\n        endDate (str): Date format \"YYYY-MM-DD\" (ex. \"2018-02-01\").\n        data (str): Data to retrieve from Agromonitoring. Available Data ['truecolor', 'falsecolor', 'ndvi', 'evi', 'evi2', 'ndwi', 'nri', 'dswi'].\n        table (bool): Display the tables of Data available with data (default: False).\n    \"\"\"\n    from  leafagro.agromonitoring import Agromonitoring as ag\n\n    # Retrieve the tile data from agromonitoring.py\n    df = ag.get_agromonitoring_tile(API_key, polygonId, startDate, endDate, data)\n\n    if df is None:\n        print(\"No data to display.\")\n        return\n\n    # Display the table if requested\n    if table:\n        print(df)\n    else:\n    # Add all tiles to the map\n        for index, row in df.iterrows():\n            tile_url = row['URL']\n            date = row['Date']\n            self.add_layer_tile(tile_url, name=f\"{date} {data}\")\n</code></pre>"},{"location":"usage/","title":"Usage","text":"<p>To use leafagro in a project:</p> <pre><code>import leafagro\n</code></pre>"},{"location":"utils/","title":"utils module","text":"<p>This is utils module that contains utility functions for leafagro</p>"},{"location":"utils/#leafagro.utils.csv_df","title":"<code>csv_df(csv_file)</code>","text":"<p>Convert the csv file to dataframe</p> <p>Parameters:</p> Name Type Description Default <code>csv_file</code> <p>The CSV file</p> required Source code in <code>leafagro/utils.py</code> <pre><code>def csv_df(csv_file):\n    \"\"\"Convert the csv file to dataframe\n\n    Args:\n        csv_file: The CSV file\n\n    \"\"\"\n    import pandas as pd\n\n    return pd.read_csv(csv_file)\n</code></pre>"},{"location":"examples/agriMonitor/","title":"agriMonitor","text":"In\u00a0[1]: Copied! <pre>import leafagro\nimport requests\n#from leafagro.agromonitoring import Agromonitoring as ag\n</pre> import leafagro import requests #from leafagro.agromonitoring import Agromonitoring as ag In\u00a0[2]: Copied! <pre>print(leafagro.__version__)\n</pre> print(leafagro.__version__) <pre>0.0.12\n</pre> In\u00a0[3]: Copied! <pre>m = leafagro.Map(center=[42.077744,-93.242726],zoom=13)\n</pre> m = leafagro.Map(center=[42.077744,-93.242726],zoom=13) In\u00a0[4]: Copied! <pre># m.show_agromonitoring_tile(API_Key, polygonId, startDate, endDate, data,False)\n</pre> # m.show_agromonitoring_tile(API_Key, polygonId, startDate, endDate, data,False) In\u00a0[5]: Copied! <pre># m.show_agromontioring_stats(API_Key,polygonId,startDate,endDate,data)\n</pre> # m.show_agromontioring_stats(API_Key,polygonId,startDate,endDate,data)  In\u00a0[6]: Copied! <pre># m.show_agromonitoring_tile(API_Key,polygonId, startDate, endDate, data, True)\n</pre> # m.show_agromonitoring_tile(API_Key,polygonId, startDate, endDate, data, True) In\u00a0[7]: Copied! <pre># m\n</pre> # m In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"examples/csv/","title":"Csv","text":"In\u00a0[1]: Copied! <pre>from leafagro import utils\n</pre> from leafagro import utils In\u00a0[2]: Copied! <pre># utils.csv_df(\"world_cities.csv\")\n</pre> # utils.csv_df(\"world_cities.csv\")"},{"location":"examples/folium/","title":"Folium","text":"In\u00a0[1]: Copied! <pre># import folium\n</pre> # import folium In\u00a0[2]: Copied! <pre># m = folium.Map(location=(45.52,-122.6),zoom_start=14)\n</pre> # m = folium.Map(location=(45.52,-122.6),zoom_start=14) In\u00a0[3]: Copied! <pre># m\n</pre> # m In\u00a0[4]: Copied! <pre># from localtileserver import TileClient, get_folium_tile_layer, examples\n# from folium import Map\n\n# #client = TileClient(\"path_of_your_image\") \n# # client = examples.get_landsat7()\n\n# # t = get_folium_tile_layer(client)\n\n# # m = Map(location=client.center(), zoom_start=client.default_zoom)\n# # t.add_to(m)\n# # m\n</pre> # from localtileserver import TileClient, get_folium_tile_layer, examples # from folium import Map  # #client = TileClient(\"path_of_your_image\")  # # client = examples.get_landsat7()  # # t = get_folium_tile_layer(client)  # # m = Map(location=client.center(), zoom_start=client.default_zoom) # # t.add_to(m) # # m In\u00a0[5]: Copied! <pre># import leafagro.foliumap as leafagro\n</pre> # import leafagro.foliumap as leafagro In\u00a0[6]: Copied! <pre># m = leafagro.Map()\n\n# url = \"https://github.com/opengeos/datasets/releases/download/raster/srtm90.tif\"\n# m.add_raster(url, cmap='terrain')\n# m\n</pre> # m = leafagro.Map()  # url = \"https://github.com/opengeos/datasets/releases/download/raster/srtm90.tif\" # m.add_raster(url, cmap='terrain') # m In\u00a0[7]: Copied! <pre># m.save('landsat.html')\n</pre> # m.save('landsat.html')"},{"location":"examples/intro/","title":"Intro","text":"In\u00a0[1]: Copied! <pre>print('Hello World!')\n</pre> print('Hello World!') <pre>Hello World!\n</pre>"},{"location":"examples/ipyWidgets/","title":"ipyWidgets","text":"In\u00a0[1]: Copied! <pre>import leafagro\n</pre> import leafagro In\u00a0[2]: Copied! <pre>m = leafagro.Map()\nm.add_basemap(\"OpenTopoMap\")\nm.add_layer_control()\n</pre> m = leafagro.Map() m.add_basemap(\"OpenTopoMap\") m.add_layer_control() In\u00a0[3]: Copied! <pre>m.add_basemap_gui()\n</pre> m.add_basemap_gui() In\u00a0[4]: Copied! <pre>m\n</pre> m Out[4]:"},{"location":"examples/leafagro/","title":"Leafagro","text":"In\u00a0[1]: Copied! <pre># m = leafagro.Map()\n# print(m.add_basemap(\"OpenTopoMap\"))\n\n#eval(\"basemaps.Esri.NatGeoWorldMap\").build_url()\n</pre> # m = leafagro.Map() # print(m.add_basemap(\"OpenTopoMap\"))  #eval(\"basemaps.Esri.NatGeoWorldMap\").build_url() In\u00a0[2]: Copied! <pre># %pip install -U leafagro\n</pre> # %pip install -U leafagro In\u00a0[3]: Copied! <pre>import os\nimport json\nimport random\nimport requests\n\nfrom ipyleaflet import Map, GeoJSON\n\nif not os.path.exists('europe_110.geo.json'):\n    url = 'https://github.com/jupyter-widgets/ipyleaflet/raw/master/examples/europe_110.geo.json'\n    r = requests.get(url)\n    with open('europe_110.geo.json', 'w') as f:\n        f.write(r.content.decode(\"utf-8\"))\n\nwith open('europe_110.geo.json', 'r') as f:\n    data = json.load(f)\n\ndef random_color(feature):\n    return {\n        'color': 'black',\n        'fillColor': random.choice(['red', 'yellow', 'green', 'orange']),\n    }\n\nm = Map(center=(50.6252978589571, 0.34580993652344), zoom=3)\n\ngeo_json = GeoJSON(\n    data=data,\n    style={\n        'opacity': 1, 'dashArray': '9', 'fillOpacity': 0.1, 'weight': 1\n    },\n    hover_style={\n        'color': 'white', 'dashArray': '0', 'fillOpacity': 0.5\n    },\n    style_callback=random_color\n)\nm.add(geo_json)\n\nm\n</pre> import os import json import random import requests  from ipyleaflet import Map, GeoJSON  if not os.path.exists('europe_110.geo.json'):     url = 'https://github.com/jupyter-widgets/ipyleaflet/raw/master/examples/europe_110.geo.json'     r = requests.get(url)     with open('europe_110.geo.json', 'w') as f:         f.write(r.content.decode(\"utf-8\"))  with open('europe_110.geo.json', 'r') as f:     data = json.load(f)  def random_color(feature):     return {         'color': 'black',         'fillColor': random.choice(['red', 'yellow', 'green', 'orange']),     }  m = Map(center=(50.6252978589571, 0.34580993652344), zoom=3)  geo_json = GeoJSON(     data=data,     style={         'opacity': 1, 'dashArray': '9', 'fillOpacity': 0.1, 'weight': 1     },     hover_style={         'color': 'white', 'dashArray': '0', 'fillOpacity': 0.5     },     style_callback=random_color ) m.add(geo_json)  m Out[3]: In\u00a0[4]: Copied! <pre>import leafagro\n</pre> import leafagro In\u00a0[5]: Copied! <pre>m = leafagro.Map()\nm\n</pre> m = leafagro.Map() m Out[5]: In\u00a0[6]: Copied! <pre>m.add_basemap(\"OpenTopoMap\")\n</pre> m.add_basemap(\"OpenTopoMap\") In\u00a0[7]: Copied! <pre>m.add_layer_tile(\"https://server.arcgisonline.com/ArcGIS/rest/services/NatGeo_World_Map/MapServer/tile/{z}/{y}/{x}\",\"Esri NatGeoWorld Map\")\n</pre> m.add_layer_tile(\"https://server.arcgisonline.com/ArcGIS/rest/services/NatGeo_World_Map/MapServer/tile/{z}/{y}/{x}\",\"Esri NatGeoWorld Map\") In\u00a0[8]: Copied! <pre>m.add_layer_control()\n</pre> m.add_layer_control()"},{"location":"examples/raster/","title":"Raster","text":"In\u00a0[1]: Copied! <pre>import leafagro\n</pre> import leafagro In\u00a0[2]: Copied! <pre>leafagro.__version__\n</pre> leafagro.__version__ Out[2]: <pre>'0.0.12'</pre> In\u00a0[3]: Copied! <pre>m = leafagro.Map()\nm.add_basemap(\"OpenTopoMap\")\nm.add_layer_control()\n# m.add_zoom_slider()\n</pre> m = leafagro.Map() m.add_basemap(\"OpenTopoMap\") m.add_layer_control() # m.add_zoom_slider() In\u00a0[4]: Copied! <pre># m.add_layer_control()\n# m\n</pre> # m.add_layer_control() # m In\u00a0[5]: Copied! <pre># m.add_raster(\"C:/Users/ibnha/Documents/Precision_Farming_ITC/2. Multi-spec/maize_varieties_RGB.tif\")\n# m\n</pre> # m.add_raster(\"C:/Users/ibnha/Documents/Precision_Farming_ITC/2. Multi-spec/maize_varieties_RGB.tif\") # m In\u00a0[6]: Copied! <pre># m.add_zoom_slider()\n</pre> # m.add_zoom_slider()"},{"location":"examples/toolbar/","title":"Toolbar","text":"In\u00a0[1]: Copied! <pre>import leafagro\nfrom ipyleaflet import WidgetControl\nimport ipywidgets as widget\n</pre> import leafagro from ipyleaflet import WidgetControl import ipywidgets as widget In\u00a0[2]: Copied! <pre>widgetWidth = \"250px\"\npadding = \"0px 0px 0px 5px\"\n\ntoolbar_button = widget.ToggleButton(\n    value = False,\n    tooltip = \"Toolbar\",\n    icon = \"wrench\",\n    layout = widget.Layout(width=\"28px\",height=\"28px\",padding=padding)\n)\n\nclose_button = widget.ToggleButton(\n    value = False,\n    tooltip = \"Close the toolbar\",\n    icon = \"times\",\n    button_style = \"primary\",\n    layout = widget.Layout(width=\"28px\",height=\"28px\",padding=padding)\n)\n</pre> widgetWidth = \"250px\" padding = \"0px 0px 0px 5px\"  toolbar_button = widget.ToggleButton(     value = False,     tooltip = \"Toolbar\",     icon = \"wrench\",     layout = widget.Layout(width=\"28px\",height=\"28px\",padding=padding) )  close_button = widget.ToggleButton(     value = False,     tooltip = \"Close the toolbar\",     icon = \"times\",     button_style = \"primary\",     layout = widget.Layout(width=\"28px\",height=\"28px\",padding=padding) ) In\u00a0[3]: Copied! <pre>def toolbar_click(change):\n    if change['new']:\n        toolbar.children = [toolbar_button, close_button]\n    else:\n        toolbar.children = [toolbar_button]\n\ntoolbar_button.observe(toolbar_click,\"value\")\n</pre> def toolbar_click(change):     if change['new']:         toolbar.children = [toolbar_button, close_button]     else:         toolbar.children = [toolbar_button]  toolbar_button.observe(toolbar_click,\"value\") In\u00a0[4]: Copied! <pre>def close_click(change):\n    if change['new']:\n        toolbar_button.close()\n        close_button.close()\n        toolbar.close()\n\nclose_button.observe(close_click,\"value\")\n# toolbar\n</pre> def close_click(change):     if change['new']:         toolbar_button.close()         close_button.close()         toolbar.close()  close_button.observe(close_click,\"value\") # toolbar"},{"location":"examples/vector/","title":"Vector","text":"In\u00a0[1]: Copied! <pre>import leafagro\n</pre> import leafagro In\u00a0[2]: Copied! <pre>m = leafagro.Map()\n</pre> m = leafagro.Map() In\u00a0[3]: Copied! <pre>m.add_basemap(\"OpenTopoMap\")\n</pre> m.add_basemap(\"OpenTopoMap\") In\u00a0[4]: Copied! <pre>m\n</pre> m Out[4]:"}]}